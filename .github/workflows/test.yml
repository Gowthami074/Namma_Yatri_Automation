on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Appium and Drivers
        run: |
          npm install -g appium
          appium --version
          appium driver install uiautomator2
          appium driver list

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Emulator
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ runner.os }}

      - name: Prepare Android Emulator
        run: |
          echo "y" | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-29" "emulator"
          echo "y" | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "system-images;android-29;google_apis;x86"
          ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager list device
          echo "Creating emulator 1"
          echo "no" | ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator1 -k "system-images;android-29;google_apis;x86" -d "pixel_2"

      - name: Configure Emulator
        run: |
          echo "hw.lcd.density=420" >> ~/.android/avd/test_emulator1.avd/config.ini
          echo "hw.lcd.height=1920" >> ~/.android/avd/test_emulator1.avd/config.ini
          echo "hw.lcd.width=1080" >> ~/.android/avd/test_emulator1.avd/config.ini
          echo "hw.ramSize=2048" >> ~/.android/avd/test_emulator1.avd/config.ini
          echo "disk.dataPartition.size=2048M" >> ~/.android/avd/test_emulator1.avd/config.ini
          echo "hw.cpu.ncore=2" >> ~/.android/avd/test_emulator1.avd/config.ini

      - name: Verify Hardware Acceleration
        run: |
          ${ANDROID_HOME}/emulator/emulator-check accel

      - name: Start Emulator
        run: |
          ${ANDROID_HOME}/emulator/emulator -avd test_emulator1 \
            -no-window \
            -gpu swiftshader_indirect \
            -no-boot-anim \
            -no-audio \
            -no-snapshot \
            -camera-back none \
            -camera-front none \
            -memory 2048 \
            -cores 2 \
            -accel on \
            -wipe-data \
            -port 5554 &

      - name: Wait for Emulator to Boot
        run: |
          adb start-server
          sleep 10
          adb devices
          while [[ -z $(adb shell getprop sys.boot_completed 2>/dev/null) ]]; do
            echo "Waiting for emulator to boot..."
            sleep 5
          done
          echo "Emulator is ready!"

      - name: Set Emulator Location
        run: |
          LATITUDE="12.942146806113909"
          LONGITUDE="77.62207138605775"
          adb -s emulator-5554 emu geo fix $LONGITUDE $LATITUDE

     - name: Install VNC Server & Ngrok
        run: |
          brew install x11vnc ngrok
          brew install --cask xquartz
          
      - name: Start Virtual Display
        run: |
          export DISPLAY=:0
          Xvfb :0 -screen 0 1280x800x24 &

      - name: Start VNC Server
        run: |
          export DISPLAY=:0
          x11vnc -forever -shared -rfbport 5900 -display :0 &

      - name: Start Ngrok (Expose VNC)
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          ngrok tcp 5900 > ngrok.log 2>&1 &
          sleep 5
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'

      - name: Log VNC Connection Details
        run: |
          echo "Use the following address to connect via VNC Viewer:"
          cat ngrok.log | grep -o "tcp://.*"
      - name: Start Appium Server
        run: |
          appium --log appium.log --relaxed-security --base-path /wd/hub &
          sleep 10
          response=$(curl --silent http://localhost:4723/wd/hub/status)
          echo "Appium server response: $response"
          if [[ $response != *"ready"* ]]; then
            echo "Appium server not running properly"
            cat appium.log
            exit 1
          fi

      - name: Run Tests
        run: |
          mvn test -DsuiteXmlFile=nammaYatriUserFlows/userLoginyml.xml
