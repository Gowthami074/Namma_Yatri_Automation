name: Android CI with Maven

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-13
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Appium and Drivers
        run: |
          npm install -g appium
          appium --version
          appium driver install uiautomator2
          appium driver list

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install XQuartz
        run: brew install --cask xquartz

      - name: Start XQuartz
        run: open -a XQuartz
        env:
          DISPLAY: ":0"

      - name: Wait for XQuartz to Start
        run: sleep 5  # Allow X server to initialize

      - name: Verify XQuartz is Running
        run: |
          echo "Checking X server..."
          ps aux | grep Xquartz || echo "X server is NOT running!"

      - name: Set DISPLAY Environment Variable
        run: echo "DISPLAY=:0" >> $GITHUB_ENV

      - name: Start VNC Server
        run: |
          echo "Starting x11vnc Server..."
          nohup x11vnc -display :0 -forever -rfbport 5900 -shared -noxdamage -repeat -passwd ${{ secrets.VNC_PASSWORD }} -bg &
          sleep 5  # Give it time to start

      - name: Verify Running Services (Appium & VNC)
        run: |
          echo "Checking running services..."
          netstat -an | grep LISTEN || echo "No services are listening on expected ports!"

      - name: Start SSH Tunnel for VNC via Serveo
        run: |
          echo "Creating SSH tunnel for VNC..."
          nohup ssh -o StrictHostKeyChecking=no -R 5900:localhost:5900 serveo.net > serveo_vnc.log 2>&1 &
          sleep 10  # Allow time for the tunnel to establish

      - name: Fetch Serveo VNC Tunnel URL
        run: |
          echo "Fetching Serveo VNC tunnel URL..."
          TUNNEL_URL=$(grep -o "serveo.net:5900" serveo_vnc.log || echo "No tunnel found!")
          echo "VNC public URL: $TUNNEL_URL"
          echo "$TUNNEL_URL" > serveo_vnc_url.txt
          cat serveo_vnc_url.txt

      - name: Log Serveo VNC Connection Details
        run: cat serveo_vnc_url.txt || echo "No Serveo tunnel found!"

      - name: Start SSH Tunnel for Appium via Serveo
        run: |
          echo "Creating SSH tunnel for Appium..."
          nohup ssh -o StrictHostKeyChecking=no -R 4723:localhost:4723 serveo.net > serveo_appium.log 2>&1 &
          sleep 10  # Allow time for the tunnel to establish

      - name: Fetch Serveo Appium Tunnel URL
        run: |
          echo "Fetching Serveo Appium tunnel URL..."
          TUNNEL_URL=$(grep -o "serveo.net:4723" serveo_appium.log || echo "No tunnel found!")
          echo "Appium public URL: $TUNNEL_URL"
          echo "$TUNNEL_URL" > serveo_appium_url.txt
          cat serveo_appium_url.txt

      - name: Log Serveo Appium Connection Details
        run: cat serveo_appium_url.txt || echo "No Serveo tunnel found!"

      - name: Prepare Android Emulator
        run: |
          echo "y" | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-29" "emulator"
          echo "y" | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "system-images;android-29;google_apis;x86"
          ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager list device
          echo "Creating emulator 1"
          echo "no" | ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator1 -k "system-images;android-29;google_apis;x86" -d "pixel_2"
          echo "Creating emulator 2"
          echo "no" | ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator2 -k "system-images;android-29;google_apis;x86" -d "pixel_2"

      - name: Configure Emulators
        run: |
          for avd in test_emulator1 test_emulator2; do
            echo "hw.lcd.density=420" >> ~/.android/avd/$avd.avd/config.ini
            echo "hw.lcd.height=1920" >> ~/.android/avd/$avd.avd/config.ini
            echo "hw.lcd.width=1080" >> ~/.android/avd/$avd.avd/config.ini
            echo "hw.ramSize=2048" >> ~/.android/avd/$avd.avd/config.ini
            echo "disk.dataPartition.size=2048M" >> ~/.android/avd/$avd.avd/config.ini
            echo "hw.cpu.ncore=4" >> ~/.android/avd/$avd.avd/config.ini
          done

      - name: Start Appium Server
        run: |
          nohup appium --log appium.log --relaxed-security --base-path /wd/hub &
          sleep 10
          response=$(curl --silent http://localhost:4723/wd/hub/status)
          echo "Appium server response: $response"
          if [[ $response != *"ready"* ]]; then
            echo "Appium server not running properly"
            cat appium.log
            exit 1
          fi

      - name: Run Tests
        run: |
          mvn test -DsuiteXmlFile=nammaYatriUserFlows/userLoginyml.xml
